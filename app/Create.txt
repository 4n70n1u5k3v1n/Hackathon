use HACKATON;
CREATE TABLE USER (
    user_id INT NOT NULL PRIMARY KEY,
    user_fname VARCHAR(50),
    user_lname VARCHAR(50),
    user_username VARCHAR(50) UNIQUE,
    user_password VARCHAR(255), -- Should be hashed
    user_dob DATE,
    user_email VARCHAR(100) UNIQUE,
    user_phoneNumber VARCHAR(20) UNIQUE,
    user_gc INT DEFAULT 0
);

CREATE TABLE TAG (
    tag_id INT PRIMARY KEY,
    tag_name VARCHAR(50) UNIQUE
);

CREATE TABLE USER_TAG (
    tag_id INT,
    user_id INT,
    tag_count INT,
    PRIMARY KEY (tag_id, user_id),
    FOREIGN KEY (tag_id) REFERENCES TAG(tag_id),
    FOREIGN KEY (user_id) REFERENCES USER(user_id)
);

CREATE TABLE EVENT (
    event_id INT PRIMARY KEY,
    event_name VARCHAR(100),
    description TEXT,
    event_date DATE,
    event_time TIME,
    event_location VARCHAR(255),
    event_qr VARCHAR(255)
);

CREATE TABLE EVENT_TAG (
    tag_id INT,
    event_id INT,
    PRIMARY KEY (tag_id, event_id),
    FOREIGN KEY (tag_id) REFERENCES TAG(tag_id),
    FOREIGN KEY (event_id) REFERENCES EVENT(event_id)
);

CREATE TABLE USER_EVENT (
    user_id INT,
    event_id INT,
    status ENUM('upcoming', 'attended'),
    PRIMARY KEY (user_id, event_id),
    FOREIGN KEY (user_id) REFERENCES USER(user_id),
    FOREIGN KEY (event_id) REFERENCES EVENT(event_id)
);

CREATE TABLE BASE_CHALLENGE (
    bschallenge_id INT PRIMARY KEY,
    bschallenge_title VARCHAR(100),
    bchallenge_gc INT,
    bchallenge_desc TEXT NULL
);

CREATE TABLE EVENT_CHALLENGE (
    challenge_id INT PRIMARY KEY,
    challenge_name VARCHAR(100),
    challenge_gc INT,
    challenge_question TEXT,
    challenge_answer TEXT,
    challenge_creator INT,
    FOREIGN KEY (challenge_creator) REFERENCES USER(user_id)
);

CREATE TABLE ANSWERED_CHALLENGES (
    challenge_id INT,
    user_id INT,
    completed_date DATETIME,
    PRIMARY KEY (challenge_id, user_id),
    FOREIGN KEY (challenge_id) REFERENCES EVENT_CHALLENGE(challenge_id),
    FOREIGN KEY (user_id) REFERENCES USER(user_id)
);

CREATE TABLE ITEM (
    item_id INT PRIMARY KEY,
    item_name VARCHAR(100),
    item_gc INT,
    item_description TEXT,
    item_photo VARCHAR(255),
    item_quantity INT
);

CREATE TABLE USER_REDEMPTION (
    REDEMPTION_ID INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    item_id INT,
    quantity INT,
    redemption_date DATETIME,
    FOREIGN KEY (user_id) REFERENCES USER(user_id),
    FOREIGN KEY (item_id) REFERENCES ITEM(item_id)
);


CREATE TABLE SKILLS (
    skill_id INT PRIMARY KEY,
    skill_name VARCHAR(100) UNIQUE
);

CREATE TABLE USER_SKILL_OFFER (
    user_id INT,
    skills_id INT,
    PRIMARY KEY (user_id, skills_id),
    FOREIGN KEY (user_id) REFERENCES USER(user_id),
    FOREIGN KEY (skills_id) REFERENCES SKILLS(skill_id)
);

CREATE TABLE USER_SKILL_WANT (
    user_id INT,
    skills_id INT,
    PRIMARY KEY (user_id, skills_id),
    FOREIGN KEY (user_id) REFERENCES USER(user_id),
    FOREIGN KEY (skills_id) REFERENCES SKILLS(skill_id)
);

CREATE TABLE USER_RECOMMENDATIONS (
    user_id INT NOT NULL,
    event_id INT NOT NULL,
    score DECIMAL(15,10) NOT NULL,
    PRIMARY KEY (user_id, event_id),
    FOREIGN KEY (user_id) REFERENCES USER(user_id) ON DELETE CASCADE,
    FOREIGN KEY (event_id) REFERENCES EVENT(event_id) ON DELETE CASCADE
);
